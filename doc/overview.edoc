@title Yet another generic Erlang hooks application.

@doc The gaffs application include one main module:

<dl>

  <dt>{@link gaffs}</dt>
  <dd>The `gaffs' module is the main interface for interacting
  with this application. It includes functions for adding, removing and running hooks.</dd>

</dl>

<h2>Basic Usage of API</h2>
<h4>
<p> Start gaffs app.</p>
</h4>
```
ok = gaffs:start().
'''
<h4>
<p> Save hook with HookName like Fun and default Options = [] and Priority = 0.</p>
</h4>
```
ok = gaffs:register(Module, Fun, Arity).
ok = gaffs:register(Fun, Module, Fun, Arity). %% this is the same
'''
<h4>
<p> Save hook with HookName and Options.</p>
</h4>
```
ok = gaffs:register(HookName, Module, Fun, Arity, Options).
'''
<h4>
<p> Save hook with HookName, Options and specific Priority.</p>
</h4>
```
ok = gaffs:register(HookName, Module, Fun, Arity, Options, Priority).
'''
<h4>
<p> Run all registered hooks for HookName with Args++[Options], ignore exceptions. Return list of {MFA, Res}.</p>
</h4>
```
ListOfResults = gaffs:map(HookName, Args).
'''
<h4>
<p> Run all registered hooks ordered by priority for HookName with Args++[Options, Acc]. Return accumulated result.</p>
</h4>
```
{ok, NewAcc} = gaffs:foldl(HookName, Args, Acc).
'''
<h4>
<p> Foldl can be stopped if hook result will be stop | {stop, Acc} | {stop, Acc, Reason}.</p>
</h4>
```
{stop, Acc, {Module, Fun}} = gaffs:foldl(HookName, Args, Acc).
'''
<h4>
<p> In application environment settings can be setted mandatory_hooks. Gaffs application won't start without their registration. Example:</p>
</h4>
```
{application, 'gaffs',
 [{description, ""},
  {vsn, "0.1.0"},

  ...

  {env,[
    {mandatory_hooks
        [
            {hook_name,
              [
                {module, fun, arity},
                {module, fun, arity, _Options = []},
                {module, fun, arity, _Options = [], priority}
              ]}
        ]},
    ...
  ]},

  ...

 ]}.
'''